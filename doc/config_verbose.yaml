geometry_file: # Absolute path to the geometry file. Type: str
output_path:  # Absolute path to the output path. Type: str
burst_mode: # Indicate if the detector is on burst/storage cell mode (True) or single cell mode (False) configuration. Type: bool.

compression:
  compress_data: # Indicate if the output data should be compressed (True) or not (False). Type: bool.
  type: # Label of the compression filter to be used, for example: gzip. Type: str.
  opts: # Options of the compression filter. Type: int.

plots:
  flag:  # Indicate if plots should be saved in intermediate steps (True) or not (False). The number of frames is automatically changed to 50. Type: bool.
  file_name: # The plots file name for saving. Type: str.
  folder_name: # The plots folder name for saving. Type: str.
  root_path: # Absolute path for the root directory for saving. Plots final state is /root_path/folder_name/*/file_name_*.png. Type: str.
  value_auto: # Control the automatic intensity adjustment of plots level (True). The normalization used is in logarithmic scale. Type: bool.
  value_min: # If value_auto is False, minimum value of the intensity level should be passed. The normalization used is in logarithmic scale. Type: int.
  value_max: # If value_auto is False, maximum value of the intensity level should be passed. The normalization used is in logarithmic scale. Type: int.
  axis_lim_auto: # Control the automatic axis limits of the plots (True). Type: bool.
  xlim_min: # If axis_lim_auto is False, minimum coordinate of the x axis should be passed. Type: int.
  xlim_max: # If axis_lim_auto is False, maximum coordinate of the x axis should be passed. Type: int.
  ylim_min: # If axis_lim_auto is False, minimum coordinate of the y axis should be passed. Type: int.
  ylim_max: # If axis_lim_auto is False, maximum coordinate of the y axis should be passed. Type: int.
  color_map: # Colormap preference for the plots, for example: viridis. Type: str.

starting_frame: # Change the index of the starting frame, it will jump the first n images of the container file. Type: int.

force_center: # Anchor the initial guess to a fixed point, if enabled this option will override other bblib pre-centering methods.
  mode: # Turn force mode on (True) or off (False). Type: bool.
  x: # Initial guess pixel coordinates in x of the assembled data, i.e. image stored in a single array with the detector panels' geometric transformations applied, according to CrystFEL referential convention. Type: int.
  y: # Initial guess pixel coordinates in y of the assembled data, i.e. image stored in a single array with the detector panels' geometric transformations applied, according to CrystFEL referential convention. Type: int.

search_radius: # Search radius used in the FriedelPairs bblib method. Type: float

pf8: # peakfinder8 paratemers for Bragg peaks search. For more information, see: https://www.desy.de/~barty/cheetah/Cheetah/SFX_hitfinding.html
  max_num_peaks: #  Maximum number of peaks. Type: int
  adc_threshold: # Arbitrary detector counts (ADC) threshold. Type: int
  minimum_snr: # Minimum signal-to-noise ratio (SNR). Type: float
  min_pixel_count: # Minimum number of pixels to consider a peak. Type: int
  max_pixel_count: # Maximum number of pixels to consider a peak. Type: int
  local_bg_radius: # Radius of the peaks local background, in pixels. Type: int
  min_res: # Minimum resolution region, in pixels. Type: int
  max_res: # Maximum resolution region, in pixels. Type: int

offset: # Add an offset to the calculated center. The offset will be applied in the end of every bblib centering method.
  x: # Offset in x, in pixels. Type: int
  y: # Offset in y, in pixels. Type: int

peak_region: # It defines the approximate background peak distance from the center of the diffraction pattern, in pixels. This option is used in MinimizePeakFWHM and CircleDetection bblib pre-centering methods.
  min: # Minimum distance, in pixels, of the background peak to the center of the diffraction pattern. Type: int
  max: # Maximum distance, in pixels, of the background peak to the center of the diffraction pattern. Type: int

outlier_distance: # It doesn't refine the center with FriedelPairs method if the initial_guess distance to the force_mode coordinates is bigger than the outlier_distance. In this case, the force_mode coordinates is used even if force_mode is False.

canny: # Controls skimage.feature.canny function, used in the CircleDetection bblib method. For more information, see: https://scikit-image.org/docs/stable/auto_examples/edges/plot_circular_elliptical_hough_transform.html
  sigma: # Standard deviation of the Gaussian filter, used in the Canny function. Usually, 3 is good. Type: float
  low_threshold: # Lower bound for hysteresis thresholding (linking edges), as quantiles of the edge magnitude image. Threshold must be in the range [0, 1). Usually, 0.9 is good. Type: float
  high_threshold: # Upper bound for hysteresis thresholding (linking edges), as quantiles of the edge magnitude images. Threshold must be in the range [0, 1). Usually, 0.99 is good. Type: float

method: # Choose the bblib pre-centering method for the initial_guess assignment. Options: 'center_of_mass', 'circle_detection' or 'minimize_peak_fwhm'. Type: str

bragg_peaks_positions_for_center_of_mass_calculation: # Choose if Bragg peaks should be masked out (0) from the image in the CenterOfMass bblib method, or use only the Bragg peaks (1), or use the image as it is (-1). Type: int

pixels_for_mask_of_bragg_peaks: # Radius of Bragg peaks, in pixels. Used in the bblib pre-centering methods. Type: int

skip_methods: # List of bblib pre-centering methods you don't want to be executed. Options: 'center_of_mass', 'circle_detection', 'minimize_peak_fwhm'. Type: List[str]
  - # Method label you want to skip. Type: str

polarization: # Configure the polarization correction before refining the center in MinimizePeakFWHM or FridelPairs bblib method. 
  skip: # Control if you want to skip polarization correction (True) or not skip (False). False enables the polarization correction to be applied. Type: bool
  axis: # Polarization axis direction. Options: 'x' and 'y', as defined by the CrystFEL referential convention. Type: str
  value: # Polarization fraction in the axis direction. Type: float